"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n// API client configuration - connects to your existing backend\nconst API_BASE_URL = \"http://192.168.0.129:3000/api/v1\" || 0;\nclass ApiClient {\n    setupInterceptors() {\n        // Request interceptor - add auth token\n        this.client.interceptors.request.use((config)=>{\n            const token = this.getAuthToken();\n            if (token) {\n                config.headers.Authorization = \"Bearer \".concat(token);\n            }\n            return config;\n        }, (error)=>Promise.reject(error));\n        // Response interceptor - handle errors\n        this.client.interceptors.response.use((response)=>response, (error)=>{\n            var _error_response;\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n                // Token expired, redirect to login\n                this.clearAuthToken();\n                window.location.href = \"/auth/login\";\n            }\n            return Promise.reject(error);\n        });\n    }\n    getAuthToken() {\n        if (true) {\n            return localStorage.getItem(\"auth_token\");\n        }\n        return null;\n    }\n    clearAuthToken() {\n        if (true) {\n            localStorage.removeItem(\"auth_token\");\n            localStorage.removeItem(\"refresh_token\");\n            localStorage.removeItem(\"user_data\");\n        }\n    }\n    // Authentication endpoints\n    async login(email, password) {\n        const response = await this.client.post(\"/auth/login\", {\n            email,\n            password\n        });\n        const { token, refreshToken, user } = response.data;\n        // Store tokens\n        if (true) {\n            localStorage.setItem(\"auth_token\", token);\n            localStorage.setItem(\"refresh_token\", refreshToken);\n        }\n        return {\n            user,\n            token,\n            refreshToken\n        };\n    }\n    async register(userData) {\n        return this.client.post(\"/auth/register\", userData);\n    }\n    async logout() {\n        this.clearAuthToken();\n        return this.client.post(\"/auth/logout\");\n    }\n    // Marketplace endpoints\n    async searchProviders(filters) {\n        console.log(\"\\uD83D\\uDD0D API Client - Making request with filters:\", filters);\n        try {\n            const response = await this.client.get(\"/marketplace/providers/search\", {\n                params: filters\n            });\n            console.log(\"✅ API Client - Response received:\", response);\n            return response;\n        } catch (error) {\n            console.error(\"❌ API Client - Request failed:\", error);\n            throw error;\n        }\n    }\n    async getProvider(id) {\n        return this.client.get(\"/marketplace/providers/\".concat(id));\n    }\n    async validatePublicChat(publicId, token) {\n        return this.client.get(\"/chat/public/\".concat(publicId, \"/validate/\").concat(token));\n    }\n    async createBooking(bookingData) {\n        return this.client.post(\"/marketplace/bookings\", bookingData);\n    }\n    async getBookings() {\n        return this.client.get(\"/marketplace/bookings\");\n    }\n    // Messaging endpoints (connects to your existing messaging system)\n    async getConversations() {\n        // Get current user to determine correct endpoint\n        const user = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n        if (user.role === \"customer\") {\n            return this.client.get(\"/chat/user/\".concat(user.id, \"/conversations\"));\n        } else {\n            return this.client.get(\"/chat/provider/\".concat(user.id, \"/conversations\"));\n        }\n    }\n    // User profile endpoints\n    async getProfile() {\n        return this.client.get(\"/auth/profile\");\n    }\n    async updateProfile(profileData) {\n        return this.client.put(\"/auth/profile\", profileData);\n    }\n    // GDPR endpoints (connects to your existing GDPR system)\n    async getConsentStatus() {\n        return this.client.get(\"/gdpr/consent-summary\");\n    }\n    async updateConsent(consentData) {\n        return this.client.post(\"/gdpr/consent\", consentData);\n    }\n    // Marketplace Chat endpoints\n    async startMarketplaceConversation(data) {\n        console.log(\"\\uD83D\\uDD17 API Client - Starting marketplace conversation:\", data);\n        const payload = {\n            providerId: data.providerId,\n            customerName: data.customerName,\n            customerEmail: data.customerEmail,\n            customerPhone: data.customerPhone || \"\"\n        };\n        console.log(\"\\uD83D\\uDD17 API Client - Request payload:\", JSON.stringify(payload, null, 2));\n        try {\n            const response = await this.client.post(\"/chat/conversations\", payload);\n            console.log(\"\\uD83D\\uDD17 API Client - Response:\", response.data);\n            return response;\n        } catch (error) {\n            var _error_response;\n            console.error(\"\\uD83D\\uDD17 API Client - Error:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n            throw error;\n        }\n    }\n    // Alias for ChatModal compatibility\n    async createOrGetConversation(data) {\n        return this.startMarketplaceConversation(data);\n    }\n    async sendMarketplaceMessage(data) {\n        console.log(\"\\uD83D\\uDCAC API Client - Sending marketplace message:\", data.message.substring(0, 50) + \"...\");\n        console.log(\"\\uD83D\\uDCAC API Client - Base URL:\", this.client.defaults.baseURL);\n        console.log(\"\\uD83D\\uDCAC API Client - Full URL would be:\", this.client.defaults.baseURL + \"/chat/messages\");\n        return this.client.post(\"/chat/messages\", data);\n    }\n    // Alias for ChatModal compatibility\n    async sendMessage(data) {\n        return this.sendMarketplaceMessage(data);\n    }\n    async getMarketplaceMessages(conversationId, limit) {\n        console.log(\"\\uD83D\\uDCD6 API Client - Getting marketplace messages for:\", conversationId);\n        console.log(\"\\uD83D\\uDCD6 API Client - Base URL:\", this.client.defaults.baseURL);\n        const url = \"/chat/conversations/\".concat(conversationId, \"/messages\");\n        console.log(\"\\uD83D\\uDCD6 API Client - Request URL:\", url);\n        console.log(\"\\uD83D\\uDCD6 API Client - Full URL would be:\", this.client.defaults.baseURL + url);\n        return this.client.get(url, {\n            params: limit ? {\n                limit\n            } : {}\n        });\n    }\n    // Alias for ChatModal compatibility\n    async getConversationMessages(conversationId, limit) {\n        return this.getMarketplaceMessages(conversationId, limit);\n    }\n    async getMarketplaceConversation(conversationId) {\n        return this.client.get(\"/chat/conversations/\".concat(conversationId));\n    }\n    // Case Management API Methods (Updated to new endpoints)\n    async createCase(caseData) {\n        console.log(\"\\uD83D\\uDCCB API Client - Creating case:\", caseData);\n        return this.client.post(\"/cases\", caseData);\n    }\n    async getCases(filters) {\n        console.log(\"\\uD83D\\uDCCB API Client - Getting cases with filters:\", filters);\n        return this.client.get(\"/cases\", {\n            params: filters\n        });\n    }\n    async getCase(caseId) {\n        console.log(\"\\uD83D\\uDCCB API Client - Getting case:\", caseId);\n        return this.client.get(\"/cases/\".concat(caseId));\n    }\n    async assignCase(caseId, action, message) {\n        console.log(\"\\uD83D\\uDCCB API Client - Assigning case:\", caseId, action);\n        if (action === \"accept\") {\n            // Use the new accept endpoint\n            return this.client.post(\"/cases/\".concat(caseId, \"/accept\"));\n        } else {\n            // Use the new decline endpoint\n            return this.client.post(\"/cases/\".concat(caseId, \"/decline\"), {\n                reason: message\n            });\n        }\n    }\n    async declineCase(caseId, providerId, reason) {\n        console.log(\"\\uD83D\\uDCCB API Client - Declining case:\", caseId, \"by provider:\", providerId);\n        return this.client.post(\"/cases/\".concat(caseId, \"/decline\"), {\n            providerId,\n            reason\n        });\n    }\n    async getDeclinedCases(providerId) {\n        console.log(\"\\uD83D\\uDEAB API Client - Getting declined cases for provider:\", providerId);\n        return this.client.get(\"/cases/declined/\".concat(providerId));\n    }\n    async undeclineCase(caseId, providerId) {\n        console.log(\"✅ API Client - Un-declining case:\", caseId, \"for provider:\", providerId);\n        return this.client.post(\"/cases/\".concat(caseId, \"/undecline\"), {\n            providerId\n        });\n    }\n    async updateCaseStatus(caseId, status, message) {\n        console.log(\"\\uD83D\\uDCCB API Client - Updating case status:\", caseId, status);\n        if (status === \"completed\" || status === \"closed\") {\n            return this.client.post(\"/cases/\".concat(caseId, \"/complete\"), {\n                completionNotes: message\n            });\n        }\n        // For other status updates, we might need to add more endpoints\n        return this.client.put(\"/cases/\".concat(caseId, \"/status\"), {\n            status,\n            message\n        });\n    }\n    async updateCaseStatusDirect(caseId, status, message) {\n        console.log(\"\\uD83D\\uDCCB API Client - Direct status update:\", caseId, status);\n        return this.client.put(\"/cases/\".concat(caseId, \"/status\"), {\n            status,\n            message\n        });\n    }\n    async getProviderCases(providerId, status) {\n        console.log(\"\\uD83D\\uDCCB API Client - Getting provider cases:\", providerId, status);\n        const params = status ? {\n            status\n        } : {};\n        return this.client.get(\"/cases/provider/\".concat(providerId), {\n            params\n        });\n    }\n    async getAvailableCases(providerId, filters) {\n        console.log(\"\\uD83D\\uDCCB API Client - Getting available cases:\", providerId, filters);\n        return this.client.get(\"/cases/queue/\".concat(providerId), {\n            params: filters\n        });\n    }\n    async getProviderMarketplaceConversations(providerId) {\n        return this.client.get(\"/chat/provider/\".concat(providerId, \"/conversations\"));\n    }\n    async markMarketplaceAsRead(conversationId, senderType) {\n        return this.client.put(\"/chat/conversations/\".concat(conversationId, \"/read\"), {\n            senderType\n        });\n    }\n    // Case template methods\n    async getCaseTemplate(serviceCategory) {\n        return this.client.get(\"/cases/templates/\".concat(serviceCategory));\n    }\n    async createServiceCase(data) {\n        return this.client.post(\"/cases\", data);\n    }\n    async updateServiceCase(caseId, data) {\n        return this.client.put(\"/cases/\".concat(caseId), data);\n    }\n    async getServiceCaseByConversation(conversationId) {\n        return this.client.get(\"/cases/conversation/\".concat(conversationId));\n    }\n    // Referral System API Methods\n    async getReferralDashboard() {\n        console.log(\"\\uD83D\\uDCCA API Client - Getting referral dashboard\");\n        return this.client.get(\"/referrals/dashboard\");\n    }\n    async generateReferralCode() {\n        console.log(\"\\uD83D\\uDD17 API Client - Generating referral code\");\n        return this.client.post(\"/referrals/generate\");\n    }\n    async trackReferralClick(providerId, data) {\n        console.log(\"\\uD83D\\uDC46 API Client - Tracking referral click:\", providerId);\n        return this.client.post(\"/referrals/track/\".concat(providerId), data);\n    }\n    async getReferralStats(providerId) {\n        console.log(\"\\uD83D\\uDCC8 API Client - Getting referral stats:\", providerId);\n        return this.client.get(\"/referrals/stats/\".concat(providerId));\n    }\n    async getReferredUsers() {\n        console.log(\"\\uD83D\\uDC65 API Client - Getting referred users\");\n        return this.client.get(\"/referrals/users\");\n    }\n    async getReferralRewards() {\n        console.log(\"\\uD83C\\uDF81 API Client - Getting referral rewards\");\n        return this.client.get(\"/referrals/rewards\");\n    }\n    async claimReferralReward(rewardId) {\n        console.log(\"\\uD83C\\uDFAF API Client - Claiming referral reward:\", rewardId);\n        return this.client.post(\"/referrals/rewards/\".concat(rewardId, \"/claim\"));\n    }\n    async getReferralLink() {\n        console.log(\"\\uD83D\\uDD17 API Client - Getting referral link\");\n        return this.client.get(\"/referrals/link\");\n    }\n    // Case Management Methods\n    async getCasesWithFilters(filters) {\n        console.log(\"\\uD83D\\uDCCB API Client - Getting cases with filters:\", filters);\n        const params = new URLSearchParams();\n        Object.entries(filters).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== undefined && value !== null) {\n                params.append(key, value.toString());\n            }\n        });\n        return this.client.get(\"/cases?\".concat(params.toString()));\n    }\n    async getCaseStats(providerId, customerId) {\n        console.log(\"\\uD83D\\uDCCA API Client - Getting case stats\");\n        const params = new URLSearchParams();\n        if (providerId) params.append(\"providerId\", providerId);\n        if (customerId) params.append(\"customerId\", customerId);\n        return this.client.get(\"/cases/stats?\".concat(params.toString()));\n    }\n    async acceptCase(caseId, providerId, providerName) {\n        console.log(\"✅ API Client - Accepting case:\", caseId);\n        return this.client.post(\"/cases/\".concat(caseId, \"/accept\"), {\n            providerId,\n            providerName\n        });\n    }\n    async completeCase(caseId, completionNotes, income) {\n        console.log(\"\\uD83C\\uDFC1 API Client - Completing case:\", caseId, \"with income:\", income);\n        return this.client.post(\"/cases/\".concat(caseId, \"/complete\"), {\n            completionNotes,\n            income\n        });\n    }\n    async getIncomeStats(providerId, startDate, endDate) {\n        console.log(\"\\uD83D\\uDCB0 API Client - Getting income stats for provider:\", providerId);\n        const params = new URLSearchParams();\n        if (startDate) params.append(\"startDate\", startDate);\n        if (endDate) params.append(\"endDate\", endDate);\n        const queryString = params.toString() ? \"?\".concat(params.toString()) : \"\";\n        return this.client.get(\"/income/provider/\".concat(providerId).concat(queryString));\n    }\n    async getIncomeYears(providerId) {\n        console.log(\"\\uD83D\\uDCC5 API Client - Getting income years for provider:\", providerId);\n        return this.client.get(\"/income/provider/\".concat(providerId, \"/years\"));\n    }\n    async getIncomeTransactionsByMethod(providerId, paymentMethod) {\n        console.log(\"\\uD83D\\uDCB0 API Client - Getting transactions for method:\", paymentMethod);\n        return this.client.get(\"/income/provider/\".concat(providerId, \"/method/\").concat(encodeURIComponent(paymentMethod)));\n    }\n    async getIncomeTransactionsByMonth(providerId, month) {\n        console.log(\"\\uD83D\\uDCB0 API Client - Getting transactions for month:\", month);\n        return this.client.get(\"/income/provider/\".concat(providerId, \"/month/\").concat(month));\n    }\n    async updateIncomeTransaction(incomeId, data) {\n        console.log(\"\\uD83D\\uDCB0 API Client - Updating income transaction:\", incomeId);\n        return this.client.put(\"/income/\".concat(incomeId), data);\n    }\n    async getSmartMatches(caseId, limit) {\n        console.log(\"\\uD83C\\uDFAF API Client - Getting smart matches for case:\", caseId);\n        const params = limit ? \"?limit=\".concat(limit) : \"\";\n        return this.client.get(\"/cases/\".concat(caseId, \"/smart-matches\").concat(params));\n    }\n    // Notification endpoints\n    async getUserNotifications() {\n        console.log(\"\\uD83D\\uDD14 API Client - Getting user notifications\");\n        return this.client.get(\"/notifications\");\n    }\n    async getUnreadNotificationCount() {\n        console.log(\"\\uD83D\\uDD14 API Client - Getting unread notification count\");\n        return this.client.get(\"/notifications/unread-count\");\n    }\n    async markNotificationAsRead(notificationId) {\n        console.log(\"\\uD83D\\uDD14 API Client - Marking notification as read:\", notificationId);\n        return this.client.post(\"/notifications/\".concat(notificationId, \"/read\"));\n    }\n    async markAllNotificationsAsRead() {\n        console.log(\"\\uD83D\\uDD14 API Client - Marking all notifications as read\");\n        return this.client.post(\"/notifications/mark-all-read\");\n    }\n    // Review Methods\n    async createReview(reviewData) {\n        console.log(\"⭐ API Client - Creating review:\", reviewData.caseId);\n        return this.client.post(\"/reviews\", reviewData);\n    }\n    async getProviderReviews(providerId, page, limit) {\n        console.log(\"⭐ API Client - Getting provider reviews:\", providerId);\n        const params = new URLSearchParams();\n        if (page) params.append(\"page\", page.toString());\n        if (limit) params.append(\"limit\", limit.toString());\n        return this.client.get(\"/reviews/provider/\".concat(providerId, \"?\").concat(params.toString()));\n    }\n    async getProviderReviewStats(providerId) {\n        console.log(\"\\uD83D\\uDCCA API Client - Getting provider review stats:\", providerId);\n        return this.client.get(\"/reviews/provider/\".concat(providerId, \"/stats\"));\n    }\n    async canReviewCase(caseId) {\n        console.log(\"❓ API Client - Checking if can review case:\", caseId);\n        return this.client.get(\"/reviews/case/\".concat(caseId, \"/can-review\"));\n    }\n    async getPendingReviews() {\n        console.log(\"⏳ API Client - Getting pending reviews\");\n        return this.client.get(\"/reviews/pending\");\n    }\n    constructor(){\n        this.client = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n            baseURL: API_BASE_URL,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            timeout: 10000\n        });\n        this.setupInterceptors();\n    }\n}\n// Export singleton instance\nconst apiClient = new ApiClient();\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiClient);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});