'use client'

import { useState, useEffect } from 'react'
import { useAuth } from '@/contexts/AuthContext'
import { useRouter } from 'next/navigation'
import { Header } from '@/components/Header'
import { Footer } from '@/components/Footer'
import ChatWidget from '@/components/ChatWidget'
import { apiClient } from '@/lib/api'

interface DashboardStats {
  totalCases: number
  activeCases: number
  completedCases: number
  totalRevenue: number
  monthlyRevenue: number
  averageRating: number
  totalReviews: number
}

interface RecentCase {
  id: string
  title: string
  status: string
  customerName: string
  createdAt: string
  urgency: string
}

export default function ProviderDashboard() {
  const { user, isAuthenticated, isLoading } = useAuth()
  const router = useRouter()
  const [stats, setStats] = useState<DashboardStats | null>(null)
  const [recentCases, setRecentCases] = useState<RecentCase[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    console.log('üè† Provider Dashboard - Auth state:', { 
      isAuthenticated, 
      isLoading, 
      user: user?.role, 
      userEmail: user?.email 
    })
    
    // Wait for authentication loading to complete
    if (isLoading) {
      console.log('‚è≥ Auth still loading, waiting...')
      return
    }
    
    // Redirect if not authenticated
    if (!isAuthenticated || !user) {
      console.log('‚ùå Not authenticated, redirecting to login')
      router.push('/auth/login')
      return
    }
    
    // Check if user is a service provider
    if (user.role !== 'service_provider' && user.role !== 'tradesperson') {
      console.log('‚ùå User is not a service provider, redirecting to home')
      router.push('/')
      return
    }
    
    // User is authenticated and is a service provider, load dashboard
    console.log('‚úÖ Service provider authenticated, loading dashboard')
    loadDashboardData()
  }, [isAuthenticated, isLoading, user, router])

  const loadDashboardData = async () => {
    try {
      setLoading(true)
      setError(null)

      // Load dashboard stats (mock data for now)
      const mockStats: DashboardStats = {
        totalCases: 45,
        activeCases: 8,
        completedCases: 37,
        totalRevenue: 12500,
        monthlyRevenue: 2800,
        averageRating: 4.7,
        totalReviews: 23
      }
      
      const mockRecentCases: RecentCase[] = [
        {
          id: '1',
          title: '–†–µ–º–æ–Ω—Ç –Ω–∞ –µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è',
          status: 'active',
          customerName: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
          createdAt: new Date().toISOString(),
          urgency: 'normal'
        },
        {
          id: '2',
          title: '–ú–æ–Ω—Ç–∞–∂ –Ω–∞ –æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ',
          status: 'pending',
          customerName: '–ú–∞—Ä–∏—è –ì–µ–æ—Ä–≥–∏–µ–≤–∞',
          createdAt: new Date(Date.now() - 86400000).toISOString(),
          urgency: 'urgent'
        }
      ]

      setStats(mockStats)
      setRecentCases(mockRecentCases)
      
    } catch (err: any) {
      console.error('Error loading dashboard data:', err)
      setError('–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Ç–∞–±–ª–æ—Ç–æ')
    } finally {
      setLoading(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'text-green-600 bg-green-50'
      case 'pending': return 'text-yellow-600 bg-yellow-50'
      case 'completed': return 'text-blue-600 bg-blue-50'
      case 'cancelled': return 'text-red-600 bg-red-50'
      default: return 'text-gray-600 bg-gray-50'
    }
  }

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–Ω–∞'
      case 'pending': return '–ß–∞–∫–∞—â–∞'
      case 'completed': return '–ó–∞–≤—ä—Ä—à–µ–Ω–∞'
      case 'cancelled': return '–û—Ç–∫–∞–∑–∞–Ω–∞'
      default: return status
    }
  }

  const getUrgencyColor = (urgency: string) => {
    switch (urgency) {
      case 'urgent': return 'text-red-600'
      case 'normal': return 'text-gray-600'
      case 'low': return 'text-green-600'
      default: return 'text-gray-600'
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <main className="container mx-auto px-4 py-8">
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-4 text-gray-600">–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–æ...</p>
          </div>
        </main>
        <Footer />
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <main className="container mx-auto px-4 py-8">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
            <p className="text-red-800">‚ùå {error}</p>
            <button 
              onClick={loadDashboardData}
              className="mt-4 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
            >
              –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ
            </button>
          </div>
        </main>
        <Footer />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <main className="container mx-auto px-4 py-8">
        {/* Welcome Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            –î–æ–±—Ä–µ –¥–æ—à–ª–∏, {user?.firstName}! üëã
          </h1>
          <p className="text-gray-600">
            –£–ø—Ä–∞–≤–ª—è–≤–∞–π—Ç–µ –≤–∞—à–∏—Ç–µ –∑–∞—è–≤–∫–∏ –∏ —Å–ª–µ–¥–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ —Å–∏
          </p>
        </div>

        {/* Stats Grid */}
        {stats && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                    <span className="text-blue-600 text-lg">üìã</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">–û–±—â–æ –∑–∞—è–≤–∫–∏</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.totalCases}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                    <span className="text-green-600 text-lg">‚ö°</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">–ê–∫—Ç–∏–≤–Ω–∏ –∑–∞—è–≤–∫–∏</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.activeCases}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <span className="text-yellow-600 text-lg">üí∞</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">–ú–µ—Å–µ—á–µ–Ω –ø—Ä–∏—Ö–æ–¥</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.monthlyRevenue} –ª–≤</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                    <span className="text-purple-600 text-lg">‚≠ê</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">–°—Ä–µ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.averageRating}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        <div className="grid gap-8 lg:grid-cols-3">
          {/* Recent Cases */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">–ü–æ—Å–ª–µ–¥–Ω–∏ –∑–∞—è–≤–∫–∏</h2>
                <a
                  href="/provider/cases"
                  className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                >
                  –í–∏–∂ –≤—Å–∏—á–∫–∏ ‚Üí
                </a>
              </div>
              
              {recentCases.length === 0 ? (
                <div className="text-center py-8">
                  <div className="text-6xl mb-4">üìã</div>
                  <p className="text-gray-600 mb-4">–ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∏ –∑–∞—è–≤–∫–∏</p>
                  <p className="text-sm text-gray-500">–ù–æ–≤–∏—Ç–µ –∑–∞—è–≤–∫–∏ —â–µ —Å–µ –ø–æ—è–≤—è—Ç —Ç—É–∫</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {recentCases.map((case_) => (
                    <div key={case_.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                      <div className="flex items-center justify-between mb-3">
                        <h3 className="font-semibold text-gray-900">{case_.title}</h3>
                        <div className="flex items-center space-x-2">
                          <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(case_.status)}`}>
                            {getStatusLabel(case_.status)}
                          </span>
                          <span className={`text-xs font-medium ${getUrgencyColor(case_.urgency)}`}>
                            {case_.urgency === 'urgent' ? 'üî• –°–ø–µ—à–Ω–æ' : 'üìÖ –ù–æ—Ä–º–∞–ª–Ω–æ'}
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex items-center justify-between text-sm text-gray-600">
                        <span>üë§ {case_.customerName}</span>
                        <span>{new Date(case_.createdAt).toLocaleDateString('bg-BG')}</span>
                      </div>
                      
                      <div className="mt-3 flex space-x-2">
                        <button className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700">
                          –í–∏–∂ –¥–µ—Ç–∞–π–ª–∏
                        </button>
                        <button className="bg-green-600 text-white px-3 py-1 rounded text-xs hover:bg-green-700">
                          –ü—Ä–∏–µ–º–∏
                        </button>
                        <button className="bg-gray-600 text-white px-3 py-1 rounded text-xs hover:bg-gray-700">
                          –°—ä–æ–±—â–µ–Ω–∏–µ
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Quick Actions Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-6 mb-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">–ë—ä—Ä–∑–∏ –¥–µ–π—Å—Ç–≤–∏—è</h2>
              
              <div className="space-y-3">
                <a
                  href="/provider/cases"
                  className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 text-sm font-medium flex items-center justify-center space-x-2"
                >
                  <span>üìã</span>
                  <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞—è–≤–∫–∏</span>
                </a>
                
                <a
                  href="/provider/profile"
                  className="w-full bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 text-sm font-medium flex items-center justify-center space-x-2"
                >
                  <span>üë§</span>
                  <span>–†–µ–¥–∞–∫—Ç–∏—Ä–∞–π –ø—Ä–æ—Ñ–∏–ª</span>
                </a>
                
                <a
                  href="/referrals"
                  className="w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 text-sm font-medium flex items-center justify-center space-x-2"
                >
                  <span>ü§ù</span>
                  <span>–ü—Ä–µ–ø–æ—Ä—ä–∫–∏</span>
                </a>
                
                <a
                  href="/provider/analytics"
                  className="w-full bg-yellow-600 text-white py-2 px-4 rounded-lg hover:bg-yellow-700 text-sm font-medium flex items-center justify-center space-x-2"
                >
                  <span>üìä</span>
                  <span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</span>
                </a>
              </div>
            </div>

            {/* Profile Summary */}
            <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg border border-blue-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">–ü—Ä–æ—Ñ–∏–ª</h3>
              <div className="space-y-3 text-sm">
                <div className="flex items-center justify-between">
                  <span>–ò–º–µ:</span>
                  <span className="font-semibold">{user?.firstName} {user?.lastName}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span>–ò–º–µ–π–ª:</span>
                  <span className="font-semibold">{user?.email}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span>–†–æ–ª—è:</span>
                  <span className="font-semibold">–î–æ—Å—Ç–∞–≤—á–∏–∫ –Ω–∞ —É—Å–ª—É–≥–∏</span>
                </div>
                {stats && (
                  <>
                    <div className="flex items-center justify-between">
                      <span>–û—Ü–µ–Ω–∫–∞:</span>
                      <span className="font-semibold">{stats.averageRating} ‚≠ê</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span>–û—Ç–∑–∏–≤–∏:</span>
                      <span className="font-semibold">{stats.totalReviews}</span>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </main>
      
      <Footer />
      <ChatWidget />
    </div>
  )
}