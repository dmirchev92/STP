const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const { v4: uuidv4 } = require('uuid');

// Connect to database
const dbPath = path.join(__dirname, 'data', 'servicetext_pro.db');
const db = new sqlite3.Database(dbPath);

console.log('üîß Populating test data for ServiceText Pro...');

// Test service providers data
const testProviders = [
  {
    id: uuidv4(),
    email: 'ivan.petrov@example.com',
    firstName: '–ò–≤–∞–Ω',
    lastName: '–ü–µ—Ç—Ä–æ–≤',
    phoneNumber: '+359888123456',
    businessName: '–ï–ª–µ–∫—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤ –ï–û–û–î',
    serviceCategory: 'electrician',
    description: '–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∏ –µ–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —É—Å–ª—É–≥–∏ —Å –Ω–∞–¥ 15 –≥–æ–¥–∏–Ω–∏ –æ–ø–∏—Ç. –ò–∑–≤—ä—Ä—à–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –≤–∏–¥–æ–≤–µ –µ–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω–∏ —Ä–∞–±–æ—Ç–∏.',
    experienceYears: 15,
    hourlyRate: 45.00,
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–¶–µ–Ω—Ç—ä—Ä',
    address: '—É–ª. –í–∏—Ç–æ—à–∞ 15',
    rating: 4.8,
    totalReviews: 127
  },
  {
    id: uuidv4(),
    email: 'maria.georgieva@example.com',
    firstName: '–ú–∞—Ä–∏—è',
    lastName: '–ì–µ–æ—Ä–≥–∏–µ–≤–∞',
    phoneNumber: '+359888234567',
    businessName: '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–∏ —É—Å–ª—É–≥–∏ –ú–∞—Ä–∏—è',
    serviceCategory: 'plumber',
    description: '–ë—ä—Ä–∑–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–∏ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–∏ —É—Å–ª—É–≥–∏. –ê–≤–∞—Ä–∏–π–Ω–∏ –ø–æ–≤–∏–∫–≤–∞–Ω–∏—è 24/7. –ì–∞—Ä–∞–Ω—Ü–∏—è –≤—ä—Ä—Ö—É –≤—Å–∏—á–∫–∏ —Ä–∞–±–æ—Ç–∏.',
    experienceYears: 8,
    hourlyRate: 40.00,
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–õ–æ–∑–µ–Ω–µ—Ü',
    address: '–±—É–ª. –ß–µ—Ä–Ω–∏ –≤—Ä—ä—Ö 47',
    rating: 4.9,
    totalReviews: 89
  },
  {
    id: uuidv4(),
    email: 'georgi.klimatik@example.com',
    firstName: '–ì–µ–æ—Ä–≥–∏',
    lastName: '–î–∏–º–∏—Ç—Ä–æ–≤',
    phoneNumber: '+359888345678',
    businessName: '–ö–ª–∏–º–∞—Ç–∏–∫ –ï–∫—Å–ø–µ—Ä—Ç',
    serviceCategory: 'hvac',
    description: '–ú–æ–Ω—Ç–∞–∂, —Ä–µ–º–æ–Ω—Ç –∏ –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –Ω–∞ –∫–ª–∏–º–∞—Ç–∏—á–Ω–∏ —Å–∏—Å—Ç–µ–º–∏. –†–∞–±–æ—Ç–∏–º —Å –≤—Å–∏—á–∫–∏ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏.',
    experienceYears: 12,
    hourlyRate: 50.00,
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–ú–ª–∞–¥–æ—Å—Ç',
    address: '—É–ª. –ê–Ω–¥—Ä–µ–π –õ—è–ø—á–µ–≤ 3',
    rating: 4.7,
    totalReviews: 156
  },
  {
    id: uuidv4(),
    email: 'stefan.carpenter@example.com',
    firstName: '–°—Ç–µ—Ñ–∞–Ω',
    lastName: '–°—Ç–µ—Ñ–∞–Ω–æ–≤',
    phoneNumber: '+359888456789',
    businessName: '–î—ä—Ä–≤–æ–¥–µ–ª—Å–∫–∏ —É—Å–ª—É–≥–∏ –°—Ç–µ—Ñ–∞–Ω',
    serviceCategory: 'carpenter',
    description: '–ò–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –º–µ–±–µ–ª–∏ –ø–æ –ø–æ—Ä—ä—á–∫–∞, —Ä–µ–º–æ–Ω—Ç –Ω–∞ –≤—Ä–∞—Ç–∏ –∏ –ø—Ä–æ–∑–æ—Ä—Ü–∏, –≤—Å–∏—á–∫–∏ –¥—ä—Ä–≤–æ–¥–µ–ª—Å–∫–∏ —É—Å–ª—É–≥–∏.',
    experienceYears: 20,
    hourlyRate: 35.00,
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–í–∏—Ç–æ—à–∞',
    address: '—É–ª. –û–∫–æ–ª–æ–≤—Ä—ä—Å—Ç–µ–Ω –ø—ä—Ç 12',
    rating: 4.6,
    totalReviews: 203
  },
  {
    id: uuidv4(),
    email: 'elena.painter@example.com',
    firstName: '–ï–ª–µ–Ω–∞',
    lastName: '–ò–≤–∞–Ω–æ–≤–∞',
    phoneNumber: '+359888567890',
    businessName: '–ë–æ—è–¥–∏—Å–≤–∞–Ω–µ –ï–ª–µ–Ω–∞',
    serviceCategory: 'painter',
    description: '–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–æ –±–æ—è–¥–∏—Å–≤–∞–Ω–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–∏–æ—Ä–∏ –∏ –µ–∫—Å—Ç–µ—Ä–∏–æ—Ä–∏. –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Å–∞–º–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏.',
    experienceYears: 6,
    hourlyRate: 30.00,
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–ö—Ä–∞—Å–Ω–æ —Å–µ–ª–æ',
    address: '—É–ª. –ü–∏—Ä–∏–Ω 8',
    rating: 4.5,
    totalReviews: 74
  }
];

async function populateData() {
  try {
    console.log('üìù Creating test users...');
    
    for (const provider of testProviders) {
      // Insert user
      await new Promise((resolve, reject) => {
        db.run(
          `INSERT OR IGNORE INTO users (id, email, password_hash, role, first_name, last_name, phone_number, created_at) 
           VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            provider.id,
            provider.email,
            '$2a$10$dummy.hash.for.testing.purposes.only', // Dummy hash
            'service_provider',
            provider.firstName,
            provider.lastName,
            provider.phoneNumber,
            new Date().toISOString()
          ],
          function(err) {
            if (err) reject(err);
            else resolve();
          }
        );
      });

      // Insert service provider profile
      await new Promise((resolve, reject) => {
        db.run(
          `INSERT OR IGNORE INTO service_provider_profiles (
            id, user_id, business_name, service_category, description, experience_years,
            hourly_rate, city, neighborhood, address, rating, total_reviews, 
            is_verified, is_active, created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            uuidv4(),
            provider.id,
            provider.businessName,
            provider.serviceCategory,
            provider.description,
            provider.experienceYears,
            provider.hourlyRate,
            provider.city,
            provider.neighborhood,
            provider.address,
            provider.rating,
            provider.totalReviews,
            1, // is_verified
            1, // is_active
            new Date().toISOString(),
            new Date().toISOString()
          ],
          function(err) {
            if (err) reject(err);
            else resolve();
          }
        );
      });

      console.log(`‚úÖ Created provider: ${provider.businessName}`);
    }

    console.log('üéØ Adding service categories...');
    
    const categories = [
      { id: uuidv4(), name: 'electrician', name_bg: '–ï–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫', description: '–ï–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —É—Å–ª—É–≥–∏', icon_name: 'electric' },
      { id: uuidv4(), name: 'plumber', name_bg: '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥—á–∏–∫', description: '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–∏ —É—Å–ª—É–≥–∏', icon_name: 'plumbing' },
      { id: uuidv4(), name: 'hvac', name_bg: '–ö–ª–∏–º–∞—Ç–∏–∫', description: '–ö–ª–∏–º–∞—Ç–∏—á–Ω–∏ —Å–∏—Å—Ç–µ–º–∏', icon_name: 'hvac' },
      { id: uuidv4(), name: 'carpenter', name_bg: '–î—ä—Ä–≤–æ–¥–µ–ª–µ—Ü', description: '–î—ä—Ä–≤–æ–¥–µ–ª—Å–∫–∏ —É—Å–ª—É–≥–∏', icon_name: 'carpenter' },
      { id: uuidv4(), name: 'painter', name_bg: '–ë–æ—è–¥–∂–∏—è', description: '–ë–æ—è–¥–∏—Å–≤–∞–Ω–µ', icon_name: 'painter' },
      { id: uuidv4(), name: 'locksmith', name_bg: '–ö–ª—é—á–∞—Ä', description: '–ö–ª—é—á–∞—Ä—Å–∫–∏ —É—Å–ª—É–≥–∏', icon_name: 'locksmith' },
      { id: uuidv4(), name: 'cleaner', name_bg: '–ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ', description: '–ü–æ—á–∏—Å—Ç–≤–∞—â–∏ —É—Å–ª—É–≥–∏', icon_name: 'cleaner' },
      { id: uuidv4(), name: 'gardener', name_bg: '–ì—Ä–∞–¥–∏–Ω–∞—Ä', description: '–ì—Ä–∞–¥–∏–Ω–∞—Ä—Å–∫–∏ —É—Å–ª—É–≥–∏', icon_name: 'gardener' },
      { id: uuidv4(), name: 'handyman', name_bg: '–ú–∞–π—Å—Ç–æ—Ä –∑–∞ –≤—Å–∏—á–∫–æ', description: '–û–±—â–∏ —Ä–µ–º–æ–Ω—Ç–∏', icon_name: 'handyman' },
      { id: uuidv4(), name: 'appliance_repair', name_bg: '–†–µ–º–æ–Ω—Ç –Ω–∞ —É—Ä–µ–¥–∏', description: '–†–µ–º–æ–Ω—Ç –Ω–∞ –¥–æ–º–∞–∫–∏–Ω—Å–∫–∏ —É—Ä–µ–¥–∏', icon_name: 'appliance' }
    ];

    for (const category of categories) {
      await new Promise((resolve, reject) => {
        db.run(
          `INSERT OR IGNORE INTO service_categories (id, name, name_bg, description, icon_name, created_at) 
           VALUES (?, ?, ?, ?, ?, ?)`,
          [category.id, category.name, category.name_bg, category.description, category.icon_name, new Date().toISOString()],
          function(err) {
            if (err) reject(err);
            else resolve();
          }
        );
      });
    }

    console.log('‚úÖ Test data populated successfully!');
    console.log(`üìä Created ${testProviders.length} service providers`);
    console.log(`üìä Created ${categories.length} service categories`);
    
  } catch (error) {
    console.error('‚ùå Error populating test data:', error);
  } finally {
    db.close();
  }
}

populateData();
