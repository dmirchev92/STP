import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  AIConversation,
  AIMessage,
  AIResponseContext,
  GeneratedResponse,
  ConversationState,
  BusinessContext,
  ProblemType,
  UrgencyLevel,
  ResponseMetadata,
  FollowUpAction
} from '../../utils/aiTypes';

/**
 * Smart Response Generation System
 * Generates contextual Bulgarian responses for AI conversations
 */
export class ResponseGenerator {
  private static instance: ResponseGenerator;
  private readonly BUSINESS_CONTEXT_KEY = '@ServiceTextPro:BusinessContext';

  private constructor() {}

  public static getInstance(): ResponseGenerator {
    if (!ResponseGenerator.instance) {
      ResponseGenerator.instance = new ResponseGenerator();
    }
    return ResponseGenerator.instance;
  }

  /**
   * Generate contextual response for AI conversation
   */
  async generateResponse(context: AIResponseContext): Promise<GeneratedResponse> {
    try {
      const startTime = Date.now();
      console.log(`[ResponseGenerator] Generating response for conversation ${context.conversation.id}`);

      // Determine response type and next state
      const responseType = this.determineResponseType(context);
      const nextState = this.determineNextState(context, responseType);

      // Generate response content
      const content = await this.generateResponseContent(context, responseType);

      // Generate follow-up actions if needed
      const followUpActions = await this.generateFollowUpActions(context, responseType);

      // Calculate confidence and reasoning
      const confidence = this.calculateResponseConfidence(context);
      const reasoning = this.generateReasoning(context, responseType);

      // Generate alternative responses
      const alternativeResponses = await this.generateAlternativeResponses(context, responseType);

      const processingTime = Date.now() - startTime;

      const response: GeneratedResponse = {
        content,
        type: responseType,
        nextState,
        followUpActions,
        metadata: {
          confidence,
          reasoning,
          alternativeResponses,
          processingTime
        }
      };

      console.log(`[ResponseGenerator] Generated ${responseType} response in ${processingTime}ms`);
      return response;

    } catch (error) {
      console.error('[ResponseGenerator] Error generating response:', error);
      
      // Return fallback response
      return this.getFallbackResponse(context);
    }
  }

  /**
   * Determine the type of response needed
   */
  private determineResponseType(context: AIResponseContext): 'question' | 'advice' | 'confirmation' | 'scheduling' | 'completion' {
    const { conversation, lastCustomerMessage, analysisResults } = context;

    // Emergency situations - provide immediate advice
    if (analysisResults.urgencyLevel === 'emergency' || analysisResults.riskAssessment.level === 'critical') {
      return 'advice';
    }

    // Check if conversation is ready for completion
    if (analysisResults.readyForCallback) {
      return 'completion';
    }

    // Check current conversation state
    switch (conversation.currentState) {
      case 'INITIAL_RESPONSE':
        return 'question';
      
      case 'AWAITING_DESCRIPTION':
        if (lastCustomerMessage.intent?.category === 'problem_description') {
          return 'question'; // Ask follow-up questions
        }
        return 'question'; // Still need description
      
      case 'FOLLOW_UP_QUESTIONS':
      case 'GATHERING_DETAILS':
        if (this.needsMoreInformation(analysisResults)) {
          return 'question';
        } else if (analysisResults.riskAssessment.level === 'high') {
          return 'advice';
        } else {
          return 'scheduling';
        }
      
      case 'PROVIDING_ADVICE':
        return 'confirmation';
      
      case 'SCHEDULING_VISIT':
        return 'completion';
      
      default:
        return 'question';
    }
  }

  /**
   * Determine next conversation state
   */
  private determineNextState(context: AIResponseContext, responseType: string): ConversationState {
    const { conversation, analysisResults } = context;

    if (responseType === 'completion') {
      return 'COMPLETED';
    }

    if (responseType === 'advice' && analysisResults.urgencyLevel === 'emergency') {
      return 'COMPLETED'; // Emergency situations end conversation quickly
    }

    switch (conversation.currentState) {
      case 'INITIAL_RESPONSE':
        return 'AWAITING_DESCRIPTION';
      
      case 'AWAITING_DESCRIPTION':
        return 'FOLLOW_UP_QUESTIONS';
      
      case 'FOLLOW_UP_QUESTIONS':
        return 'GATHERING_DETAILS';
      
      case 'GATHERING_DETAILS':
        if (analysisResults.readyForCallback) {
          return 'COMPLETED';
        }
        return 'PROVIDING_ADVICE';
      
      case 'PROVIDING_ADVICE':
        return 'SCHEDULING_VISIT';
      
      case 'SCHEDULING_VISIT':
        return 'COMPLETED';
      
      default:
        return 'GATHERING_DETAILS';
    }
  }

  /**
   * Generate response content based on context and type
   */
  private async generateResponseContent(
    context: AIResponseContext, 
    responseType: string
  ): Promise<string> {
    const { conversation, analysisResults, businessContext } = context;

    switch (responseType) {
      case 'question':
        return await this.generateQuestionResponse(context);
      
      case 'advice':
        return await this.generateAdviceResponse(context);
      
      case 'confirmation':
        return await this.generateConfirmationResponse(context);
      
      case 'scheduling':
        return await this.generateSchedulingResponse(context);
      
      case 'completion':
        return await this.generateCompletionResponse(context);
      
      default:
        return '–ë–ª–∞–≥–æ–¥–∞—Ä—è –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞. –ú–æ–∂–µ—Ç–µ –ª–∏ –¥–∞ –º–∏ –∫–∞–∂–µ—Ç–µ –æ—â–µ –Ω–µ—â–æ –∑–∞ –ø—Ä–æ–±–ª–µ–º–∞?';
    }
  }

  /**
   * Generate question-type response
   */
  private async generateQuestionResponse(context: AIResponseContext): Promise<string> {
    const { conversation, analysisResults } = context;
    const problemType = analysisResults.problemType;
    const extractedInfo = analysisResults.extractedInfo;

    // Determine what information is missing
    const missingInfo = this.identifyMissingInformation(extractedInfo);

    if (missingInfo.includes('location')) {
      return this.getLocationQuestion(problemType);
    }

    if (missingInfo.includes('symptoms')) {
      return this.getSymptomsQuestion(problemType);
    }

    if (missingInfo.includes('duration')) {
      return this.getDurationQuestion(problemType);
    }

    if (missingInfo.includes('safety')) {
      return this.getSafetyQuestion(problemType);
    }

    // Problem-specific follow-up questions
    return this.getProblemSpecificQuestion(problemType, extractedInfo);
  }

  /**
   * Generate advice-type response
   */
  private async generateAdviceResponse(context: AIResponseContext): Promise<string> {
    const { analysisResults, businessContext } = context;
    const riskLevel = analysisResults.riskAssessment.level;
    const problemType = analysisResults.problemType;

    let response = '';

    if (riskLevel === 'critical') {
      response = 'üö® –°–ü–ï–®–ù–û! –ó–∞ –≤–∞—à–∞—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç:\n\n';
      response += analysisResults.riskAssessment.immediateActions.join('\n‚Ä¢ ') + '\n\n';
      response += `–ò–¥–≤–∞–º –ø—Ä–∏ –≤–∞—Å –í–ï–î–ù–ê–ì–ê! –©–µ –±—ä–¥–∞ —Ç–∞–º –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ 15-30 –º–∏–Ω—É—Ç–∏. `;
      response += `–ó–∞ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏: ${businessContext.emergencyPhone}`;
    } else if (riskLevel === 'high') {
      response = '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í–∞–∂–Ω–∏ –º–µ—Ä–∫–∏ –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç:\n\n';
      response += '‚Ä¢ ' + analysisResults.riskAssessment.safetyPrecautions.join('\n‚Ä¢ ') + '\n\n';
      response += '–©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ —á–∞—Å–∞ –∑–∞ –¥–∞ —É–≥–æ–≤–æ—Ä–∏–º —á–∞—Å. ';
      response += this.getProblemSpecificAdvice(problemType);
    } else {
      response = '–†–∞–∑–±–∏—Ä–∞–º –ø—Ä–æ–±–ª–µ–º–∞. –ï—Ç–æ –Ω—è–∫–æ–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏:\n\n';
      
      if (analysisResults.recommendations.length > 0) {
        const immediateRecs = analysisResults.recommendations.filter(r => r.priority === 'high');
        if (immediateRecs.length > 0) {
          response += '‚Ä¢ ' + immediateRecs.map(r => r.description).join('\n‚Ä¢ ') + '\n\n';
        }
      }

      response += this.getProblemSpecificAdvice(problemType);
    }

    return response;
  }

  /**
   * Generate confirmation-type response
   */
  private async generateConfirmationResponse(context: AIResponseContext): Promise<string> {
    const { analysisResults } = context;
    const problemType = this.getProblemTypeInBulgarian(analysisResults.problemType);
    const location = analysisResults.extractedInfo.location || '–¥–æ–º–∞ –≤–∏';

    return `–†–∞–∑–±—Ä–∞—Ö, —á–µ –∏–º–∞—Ç–µ –ø—Ä–æ–±–ª–µ–º —Å ${problemType} –≤ ${location}. ` +
           `–ü—Ä–∞–≤–∏–ª–Ω–æ –ª–∏ —Ä–∞–∑–±–∏—Ä–∞–º —Å–∏—Ç—É–∞—Ü–∏—è—Ç–∞? –ò–º–∞ –ª–∏ –æ—â–µ –Ω–µ—â–æ –≤–∞–∂–Ω–æ, –∫–æ–µ—Ç–æ –¥–∞ –∑–Ω–∞–º?`;
  }

  /**
   * Generate scheduling-type response
   */
  private async generateSchedulingResponse(context: AIResponseContext): Promise<string> {
    const { analysisResults, businessContext } = context;
    const urgency = analysisResults.urgencyLevel;

    let response = '–û—Ç–ª–∏—á–Ω–æ! –ò–º–∞–º –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–∞ –≤–∏ –ø–æ–º–æ–≥–Ω–∞. ';

    if (urgency === 'high') {
      response += '–ü–æ—Ä–∞–¥–∏ —Å–ø–µ—à–Ω–æ—Å—Ç—Ç–∞, —â–µ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ 30 –º–∏–Ω—É—Ç–∏ –∑–∞ –¥–∞ —É–≥–æ–≤–æ—Ä–∏–º —á–∞—Å –¥–Ω–µ—Å. ';
    } else if (urgency === 'medium') {
      response += '–©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å –¥–æ –∫—Ä–∞—è –Ω–∞ –¥–µ–Ω—è –∑–∞ –¥–∞ —É–≥–æ–≤–æ—Ä–∏–º —É–¥–æ–±–µ–Ω —á–∞—Å. ';
    } else {
      response += '–©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ –¥–∞ —É–≥–æ–≤–æ—Ä–∏–º —á–∞—Å. ';
    }

    response += `–†–∞–±–æ—Ç—è ${businessContext.workingHours}. `;
    response += '–ö–æ–≥–∞ –≤–∏ –µ –Ω–∞–π-—É–¥–æ–±–Ω–æ - —Å—É—Ç—Ä–∏–Ω, —Å–ª–µ–¥–æ–±–µ–¥ –∏–ª–∏ –≤–µ—á–µ—Ä?';

    return response;
  }

  /**
   * Generate completion-type response
   */
  private async generateCompletionResponse(context: AIResponseContext): Promise<string> {
    const { analysisResults, businessContext } = context;
    const problemType = this.getProblemTypeInBulgarian(analysisResults.problemType);
    const urgency = analysisResults.urgencyLevel;
    const location = analysisResults.extractedInfo.location || '–¥–æ–º–∞ –≤–∏';

    let response = `–ë–ª–∞–≥–æ–¥–∞—Ä—è –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è! –û–±–æ–±—â–∞–≤–∞–º:\n\n`;
    response += `üîß –ü—Ä–æ–±–ª–µ–º: ${problemType} –≤ ${location}\n`;
    
    if (analysisResults.extractedInfo.symptoms.length > 0) {
      response += `üìã –°–∏–º–ø—Ç–æ–º–∏: ${analysisResults.extractedInfo.symptoms.join(', ')}\n`;
    }

    if (analysisResults.estimatedCost) {
      response += `üí∞ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∞ —Ü–µ–Ω–∞: ${analysisResults.estimatedCost.min}-${analysisResults.estimatedCost.max} –ª–≤.\n`;
    }

    response += '\n';

    // Add timeline based on urgency
    if (urgency === 'emergency') {
      response += '‚ö° –°–ü–ï–®–ù–û: –ò–¥–≤–∞–º –≤–µ–¥–Ω–∞–≥–∞ (15-30 –º–∏–Ω)\n';
    } else if (urgency === 'high') {
      response += 'üïê –ü–†–ò–û–†–ò–¢–ï–¢: –©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ –¥–æ 1 —á–∞—Å\n';
    } else if (urgency === 'medium') {
      response += 'üìÖ –ü–õ–ê–ù–ò–†–ê–ù–û: –©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ –¥–æ –∫—Ä–∞—è –Ω–∞ –¥–µ–Ω—è\n';
    } else {
      response += 'üìã –°–¢–ê–ù–î–ê–†–¢–ù–û: –©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ 24—á\n';
    }

    response += `\nüë®‚Äçüîß ${businessContext.technicianName}, ${businessContext.profession} —Å ${businessContext.experience} –≥–æ–¥–∏–Ω–∏ –æ–ø–∏—Ç\n`;
    response += `üìû –ó–∞ —Å–ø–µ—à–Ω–∏ —Å–ª—É—á–∞–∏: ${businessContext.emergencyPhone}`;

    // Add safety reminder if needed
    if (analysisResults.riskAssessment.level === 'high' || analysisResults.riskAssessment.level === 'critical') {
      response += '\n\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –ø–æ–≤—Ä–µ–¥–µ–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–æ –º–æ–µ—Ç–æ –∏–¥–≤–∞–Ω–µ!';
    }

    return response;
  }

  /**
   * Generate follow-up actions
   */
  private async generateFollowUpActions(
    context: AIResponseContext, 
    responseType: string
  ): Promise<FollowUpAction[]> {
    const actions: FollowUpAction[] = [];
    const { analysisResults } = context;

    // Set reminder for callback
    if (responseType === 'completion') {
      const delay = this.getCallbackDelay(analysisResults.urgencyLevel);
      actions.push({
        type: 'set_reminder',
        delay,
        data: {
          action: 'callback',
          phoneNumber: context.conversation.phoneNumber,
          message: '–í—Ä–µ–º–µ –∑–∞ –æ–±–∞–∂–¥–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞'
        }
      });
    }

    // Create task for urgent issues
    if (analysisResults.urgencyLevel === 'emergency') {
      actions.push({
        type: 'create_task',
        delay: 0,
        data: {
          title: '–°–ü–ï–®–ï–ù –°–õ–£–ß–ê–ô',
          description: `${analysisResults.problemType} - ${context.conversation.phoneNumber}`,
          priority: 'urgent'
        }
      });
    }

    // Send summary to technician
    if (responseType === 'completion') {
      actions.push({
        type: 'send_summary',
        delay: 60000, // 1 minute delay
        data: {
          conversation: context.conversation,
          analysis: analysisResults
        }
      });
    }

    // Escalate if critical risk
    if (analysisResults.riskAssessment.level === 'critical') {
      actions.push({
        type: 'escalate',
        delay: 0,
        data: {
          reason: 'Critical safety risk detected',
          phoneNumber: context.conversation.phoneNumber
        }
      });
    }

    return actions;
  }

  /**
   * Helper methods for generating specific types of questions
   */
  private getLocationQuestion(problemType: ProblemType): string {
    const locationQuestions: Record<ProblemType, string> = {
      electrical_outlet: '–í –∫–æ—è —Å—Ç–∞—è –µ –ø—Ä–æ–±–ª–µ–º–Ω–∏—è—Ç –∫–æ–Ω—Ç–∞–∫—Ç? –ö—É—Ö–Ω—è, –±–∞–Ω—è, —Ö–æ–ª –∏–ª–∏ –¥—Ä—É–≥–æ –º—è—Å—Ç–æ?',
      electrical_panel: '–ö—ä–¥–µ —Å–µ –Ω–∞–º–∏—Ä–∞ –µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ—Ç–æ —Ç–∞–±–ª–æ? –í –º–∞–∑–µ—Ç–æ, –∫–æ—Ä–∏–¥–æ—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–æ –º—è—Å—Ç–æ?',
      plumbing_leak: '–ö—ä–¥–µ —Ç–æ—á–Ω–æ —Ç–µ—á–µ? –í –±–∞–Ω—è—Ç–∞, –∫—É—Ö–Ω—è—Ç–∞, –∏–ª–∏ –¥—Ä—É–≥–æ –º—è—Å—Ç–æ?',
      plumbing_blockage: '–ö—ä–¥–µ –µ –∑–∞–ø—É—à–≤–∞–Ω–µ—Ç–æ? –í —Ç–æ–∞–ª–µ—Ç–Ω–∞—Ç–∞, –º–∏–≤–∫–∞—Ç–∞, –∏–ª–∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞?',
      hvac_heating: '–í –∫–æ–∏ —Å—Ç–∞–∏ –Ω—è–º–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ? –ù–∞–≤—Å—è–∫—ä–¥–µ –ª–∏, –∏–ª–∏ —Å–∞–º–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏ –ø–æ–º–µ—â–µ–Ω–∏—è?',
      unknown: '–í –∫–æ—è —á–∞—Å—Ç –æ—Ç –¥–æ–º–∞/–æ—Ñ–∏—Å–∞ –µ –ø—Ä–æ–±–ª–µ–º—ä—Ç?'
    };

    return locationQuestions[problemType] || locationQuestions.unknown;
  }

  private getSymptomsQuestion(problemType: ProblemType): string {
    const symptomQuestions: Record<ProblemType, string> = {
      electrical_outlet: '–ö–∞–∫–≤–æ —Ç–æ—á–Ω–æ —Å–µ —Å–ª—É—á–≤–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞? –ò—Å–∫—Ä–∏ –ª–∏, –Ω–µ —Ä–∞–±–æ—Ç–∏ –ª–∏, –∏–ª–∏ –∏–º–∞ –¥—Ä—É–≥ –ø—Ä–æ–±–ª–µ–º?',
      electrical_panel: '–ò–∑—Å–∫–æ—á–∏–ª–∏ –ª–∏ —Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—Ç–µ? –ò–º–∞ –ª–∏ –∏—Å–∫—Ä–∏, –∑–≤—É—Ü–∏ –∏–ª–∏ –º–∏—Ä–∏–∑–º–∏ –æ—Ç —Ç–∞–±–ª–æ—Ç–æ?',
      plumbing_leak: '–°–∏–ª–Ω–æ –ª–∏ —Ç–µ—á–µ –∏–ª–∏ —Å–∞–º–æ –∫–∞–ø–µ? –ò–º–∞ –ª–∏ –≤–∏–¥–∏–º–∏ —â–µ—Ç–∏ –æ—Ç –≤–æ–¥–∞—Ç–∞?',
      plumbing_blockage: '–ò–∑–æ–±—â–æ –Ω–µ —Ç–µ—á–µ –ª–∏ –≤–æ–¥–∞—Ç–∞, –∏–ª–∏ —Ç–µ—á–µ –º–Ω–æ–≥–æ –±–∞–≤–Ω–æ?',
      hvac_heating: '–°—Ç—É–¥–µ–Ω–æ –ª–∏ –µ –≤ —Ü—è–ª–∞—Ç–∞ –∫—ä—â–∞? –†–∞–±–æ—Ç–∏ –ª–∏ –∫–æ—Ç–µ–ª—ä—Ç? –ò–º–∞ –ª–∏ —Ç–æ–ø–ª–∞ –≤–æ–¥–∞?',
      unknown: '–ú–æ–∂–µ—Ç–µ –ª–∏ –¥–∞ –æ–ø–∏—à–µ—Ç–µ –ø–æ-–ø–æ–¥—Ä–æ–±–Ω–æ –∫–∞–∫–≤–æ —Ç–æ—á–Ω–æ —Å–µ —Å–ª—É—á–≤–∞?'
    };

    return symptomQuestions[problemType] || symptomQuestions.unknown;
  }

  private getDurationQuestion(problemType: ProblemType): string {
    return '–û—Ç –∫–æ–≥–∞ –µ —Ç–æ–∑–∏ –ø—Ä–æ–±–ª–µ–º? –¢–æ–∫—É —â–æ –ª–∏ —Å–µ —Å–ª—É—á–∏, –∏–ª–∏ –µ –æ—Ç –Ω—è–∫–æ–ª–∫–æ –¥–Ω–∏?';
  }

  private getSafetyQuestion(problemType: ProblemType): string {
    const safetyQuestions: Record<ProblemType, string> = {
      electrical_outlet: '–ò–º–∞ –ª–∏ –∏—Å–∫—Ä–∏, –¥–∏–º –∏–ª–∏ —Å—Ç—Ä–∞–Ω–Ω–∞ –º–∏—Ä–∏–∑–º–∞? –í–ù–ò–ú–ê–ù–ò–ï - –Ω–µ –¥–æ–∫–æ—Å–≤–∞–π—Ç–µ –Ω–∏—â–æ –∞–∫–æ –∏–º–∞ –∏—Å–∫—Ä–∏!',
      electrical_panel: '–ò–º–∞ –ª–∏ –∏—Å–∫—Ä–∏ –∏–ª–∏ –Ω–µ–æ–±–∏—á–∞–π–Ω–∏ –∑–≤—É—Ü–∏ –æ—Ç —Ç–∞–±–ª–æ—Ç–æ? –ê–∫–æ –¥–∞ - –≤–µ–¥–Ω–∞–≥–∞ —Å–ø—Ä–µ—Ç–µ –≥–ª–∞–≤–Ω–∏—è –ø—Ä–µ–∫—ä—Å–≤–∞—á!',
      plumbing_leak: '–°–∏–ª–Ω–æ –ª–∏ —Ç–µ—á–µ? –ò–º–∞ –ª–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç –æ—Ç –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ? –ê–∫–æ –¥–∞ - —Å–ø—Ä–µ—Ç–µ –≥–ª–∞–≤–Ω–∏—è –∫—Ä–∞–Ω!',
      hvac_heating: '–ò–º–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–Ω–∏ –º–∏—Ä–∏–∑–º–∏ –∏–ª–∏ –¥–∏–º –æ—Ç –∫–æ—Ç–µ–ª–∞? –ê–∫–æ –¥–∞ - —Å–ø—Ä–µ—Ç–µ –≥–æ –≤–µ–¥–Ω–∞–≥–∞!',
      unknown: '–ò–º–∞ –ª–∏ –Ω–µ—â–æ –æ–ø–∞—Å–Ω–æ –≤ —Å–∏—Ç—É–∞—Ü–∏—è—Ç–∞? –ò—Å–∫—Ä–∏, –¥–∏–º, —Å–∏–ª–Ω–æ —Ç–µ—á–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥–æ?'
    };

    return safetyQuestions[problemType] || safetyQuestions.unknown;
  }

  private getProblemSpecificQuestion(problemType: ProblemType, extractedInfo: any): string {
    // Generate context-specific questions based on what we already know
    const fallbackQuestions = [
      '–ò–º–∞ –ª–∏ –æ—â–µ —Å–∏–º–ø—Ç–æ–º–∏ –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –∫–æ–∏—Ç–æ –¥–∞ —Å–ø–æ–¥–µ–ª–∏—Ç–µ?',
      '–ü—Ä–∞–≤–∏–ª–∏ –ª–∏ —Å—Ç–µ —Å–∫–æ—Ä–æ—à–Ω–∏ –ø—Ä–æ–º–µ–Ω–∏ –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç–∏ –≤ —Ç–∞–∑–∏ –æ–±–ª–∞—Å—Ç?',
      '–ö–æ–≥–∞ –≤–∏ –µ –Ω–∞–π-—É–¥–æ–±–Ω–æ –¥–∞ –¥–æ–π–¥–∞ –∑–∞ –æ–≥–ª–µ–¥?'
    ];

    return fallbackQuestions[Math.floor(Math.random() * fallbackQuestions.length)];
  }

  private getProblemSpecificAdvice(problemType: ProblemType): string {
    const advice: Record<ProblemType, string> = {
      electrical_outlet: '–ù–µ –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–æ –º–æ–µ—Ç–æ –∏–¥–≤–∞–Ω–µ. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –Ω–µ –µ –∏–∑—Å–∫–æ—á–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∞ –≤ —Ç–∞–±–ª–æ—Ç–æ.',
      electrical_panel: '–ù–µ –¥–æ–∫–æ—Å–≤–∞–π—Ç–µ –Ω–∏—â–æ –≤ —Ç–∞–±–ª–æ—Ç–æ. –ü—Ä–∏ –Ω—É–∂–¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —É–¥—ä–ª–∂–∏—Ç–µ–ª–∏ –æ—Ç –¥—Ä—É–≥–∏ —Å—Ç–∞–∏.',
      plumbing_leak: '–ü–æ—Å—Ç–∞–≤–µ—Ç–µ —Å—ä–¥ –ø–æ–¥ —Ç–µ—á–µ–Ω–∏–µ—Ç–æ –∏ –∑–∞—Ç–µ–≥–Ω–µ—Ç–µ –ª–µ–∫–æ –≤—Ä—ä–∑–∫–∏—Ç–µ –∞–∫–æ –µ –≤—ä–∑–º–æ–∂–Ω–æ.',
      hvac_heating: '–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –∏–º–∞ –≥–æ—Ä–∏–≤–æ –∏ –¥–∞–ª–∏ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç—ä—Ç –µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª–Ω–æ.',
      unknown: '–ù–µ –ø—Ä–∞–≤–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª–Ω–∏ –æ–ø–∏—Ç–∏ –∑–∞ —Ä–µ–º–æ–Ω—Ç –¥–æ –º–æ–µ—Ç–æ –∏–¥–≤–∞–Ω–µ.'
    };

    return advice[problemType] || advice.unknown;
  }

  /**
   * Helper methods
   */
  private needsMoreInformation(analysisResults: any): boolean {
    const hasLocation = !!analysisResults.extractedInfo.location;
    const hasSymptoms = analysisResults.extractedInfo.symptoms.length >= 2;
    const hasProblemType = analysisResults.problemType !== 'unknown';

    return !hasLocation || !hasSymptoms || !hasProblemType;
  }

  private identifyMissingInformation(extractedInfo: any): string[] {
    const missing: string[] = [];

    if (!extractedInfo.location) missing.push('location');
    if (extractedInfo.symptoms.length < 2) missing.push('symptoms');
    if (!extractedInfo.duration) missing.push('duration');
    if (extractedInfo.safetyIssues.length === 0) missing.push('safety');

    return missing;
  }

  private getProblemTypeInBulgarian(problemType: ProblemType): string {
    const translations: Record<ProblemType, string> = {
      electrical_outlet: '–µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç',
      electrical_panel: '–µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ —Ç–∞–±–ª–æ',
      electrical_wiring: '–µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ –æ–∫–∞–±–µ–ª—è–≤–∞–Ω–µ',
      electrical_lighting: '–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ',
      electrical_appliance: '–µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏ —É—Ä–µ–¥',
      plumbing_leak: '—Ç–µ—á–µ–Ω–∏–µ –≤—ä–≤ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–∞',
      plumbing_blockage: '–∑–∞–ø—É—à–≤–∞–Ω–µ –≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞',
      plumbing_pressure: '–Ω–∞–ª—è–≥–∞–Ω–µ –≤—ä–≤ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–∞',
      plumbing_heating: '—Ç–æ–ø–ª–∞ –≤–æ–¥–∞',
      hvac_heating: '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ',
      hvac_cooling: '–∫–ª–∏–º–∞—Ç–∏–∑–∞—Ü–∏—è',
      hvac_ventilation: '–≤–µ–Ω—Ç–∏–ª–∞—Ü–∏—è',
      general_maintenance: '–ø–æ–¥–¥—Ä—ä–∂–∫–∞',
      unknown: '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—è –ø—Ä–æ–±–ª–µ–º'
    };

    return translations[problemType] || '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—è –ø—Ä–æ–±–ª–µ–º';
  }

  private getCallbackDelay(urgencyLevel: UrgencyLevel): number {
    const delays: Record<UrgencyLevel, number> = {
      emergency: 5 * 60 * 1000,      // 5 minutes
      critical: 10 * 60 * 1000,      // 10 minutes
      high: 30 * 60 * 1000,          // 30 minutes
      medium: 2 * 60 * 60 * 1000,    // 2 hours
      low: 24 * 60 * 60 * 1000       // 24 hours
    };

    return delays[urgencyLevel] || delays.medium;
  }

  private calculateResponseConfidence(context: AIResponseContext): number {
    const { analysisResults, conversation } = context;
    
    let confidence = 0.7; // Base confidence

    // Factor in analysis confidence
    confidence += analysisResults.confidence * 0.2;

    // Factor in conversation length
    const messageCount = conversation.messages.filter(m => m.sender === 'customer').length;
    if (messageCount >= 3) {
      confidence += 0.1;
    }

    return Math.min(0.95, confidence);
  }

  private generateReasoning(context: AIResponseContext, responseType: string): string {
    const { analysisResults, conversation } = context;
    
    return `Generated ${responseType} response based on problem type: ${analysisResults.problemType}, ` +
           `urgency: ${analysisResults.urgencyLevel}, conversation state: ${conversation.currentState}`;
  }

  private async generateAlternativeResponses(
    context: AIResponseContext, 
    responseType: string
  ): Promise<string[]> {
    // Generate 1-2 alternative responses with different tone/approach
    const alternatives: string[] = [];

    if (responseType === 'question') {
      alternatives.push('–ú–æ–∂–µ—Ç–µ –ª–∏ –¥–∞ –º–∏ –¥–∞–¥–µ—Ç–µ –æ—â–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–æ–≤–∞ –∫–∞–∫–≤–æ —Ç–æ—á–Ω–æ —Å–µ —Å–ª—É—á–≤–∞?');
    }

    if (responseType === 'completion') {
      alternatives.push('–û—Ç–ª–∏—á–Ω–æ! –ò–º–∞–º –≤—Å–∏—á–∫–∞—Ç–∞ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å —Å–∫–æ—Ä–æ –∑–∞ –¥–∞ —É–≥–æ–≤–æ—Ä–∏–º —á–∞—Å.');
    }

    return alternatives;
  }

  private getFallbackResponse(context: AIResponseContext): GeneratedResponse {
    return {
      content: '–ë–ª–∞–≥–æ–¥–∞—Ä—è –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞. –©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å —Å–∫–æ—Ä–æ –∑–∞ –¥–∞ –æ–±—Å—ä–¥–∏–º –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥—Ä–æ–±–Ω–æ.',
      type: 'confirmation',
      nextState: 'COMPLETED',
      metadata: {
        confidence: 0.3,
        reasoning: 'Fallback response due to processing error',
        processingTime: 0
      }
    };
  }

  /**
   * Get business context from storage
   */
  private async getBusinessContext(): Promise<BusinessContext> {
    try {
      const stored = await AsyncStorage.getItem(this.BUSINESS_CONTEXT_KEY);
      if (stored) {
        return JSON.parse(stored);
      }
    } catch (error) {
      console.error('[ResponseGenerator] Error loading business context:', error);
    }

    // Return default context
    return {
      technicianName: '–ú–∞–π—Å—Ç–æ—Ä',
      profession: '–µ–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫',
      experience: '5',
      workingHours: '08:00 - 18:00',
      emergencyPhone: '+359888123456',
      currentTime: new Date(),
      isBusinessHours: true
    };
  }
}
