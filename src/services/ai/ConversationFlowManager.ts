import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  AIConversation,
  AIMessage,
  ConversationState,
  ConversationStatus,
  ConversationFlow,
  FlowQuestion,
  ExtractedEntity,
  ProblemType,
  UrgencyLevel
} from '../../utils/aiTypes';
import { BulgarianNLPProcessor } from './BulgarianNLPProcessor';

/**
 * Conversation Flow Manager
 * Manages AI conversation state, flow, and transitions
 */
export class ConversationFlowManager {
  private static instance: ConversationFlowManager;
  private readonly CONVERSATIONS_KEY = '@ServiceTextPro:AIConversations';
  private nlpProcessor: BulgarianNLPProcessor;
  private conversations: Map<string, AIConversation> = new Map();
  private conversationFlows: ConversationFlow;

  private constructor() {
    this.nlpProcessor = BulgarianNLPProcessor.getInstance();
    this.initializeConversationFlows();
  }

  public static getInstance(): ConversationFlowManager {
    if (!ConversationFlowManager.instance) {
      ConversationFlowManager.instance = new ConversationFlowManager();
    }
    return ConversationFlowManager.instance;
  }

  /**
   * Initialize conversation flows with Bulgarian questions
   */
  private initializeConversationFlows(): void {
    this.conversationFlows = {
      initialQuestions: [
        {
          id: 'problem_description',
          text: '–ó–¥—Ä–∞–≤–µ–π—Ç–µ! –ü–æ–ª—É—á–∏—Ö –≤–∞—à–µ—Ç–æ –æ–±–∞–∂–¥–∞–Ω–µ. –ú–æ–ª—è, –æ–ø–∏—à–µ—Ç–µ –º–∏ –∫–∞–∫—ä–≤ –µ –ø—Ä–æ–±–ª–µ–º—ä—Ç?',
          type: 'open',
          required: true,
          followUp: ['location_question']
        },
        {
          id: 'location_question',
          text: '–í –∫–æ—è —Å—Ç–∞—è –∏–ª–∏ —á–∞—Å—Ç –æ—Ç –∏–º–æ—Ç–∞ –µ –ø—Ä–æ–±–ª–µ–º—ä—Ç?',
          type: 'open',
          required: true,
          followUp: ['urgency_question']
        },
        {
          id: 'urgency_question',
          text: '–û—Ç –∫–æ–≥–∞ –µ —Ç–æ–∑–∏ –ø—Ä–æ–±–ª–µ–º? –°–ø–µ—à–Ω–æ –ª–∏ –µ?',
          type: 'open',
          required: true,
          followUp: ['symptoms_question']
        }
      ],
      followUpQuestions: {
        electrical_outlet: [
          {
            id: 'electrical_outlet_symptoms',
            text: '–ò–º–∞ –ª–∏ –∏—Å–∫—Ä–∏, –¥–∏–º –∏–ª–∏ —Å—Ç—Ä–∞–Ω–Ω–∞ –º–∏—Ä–∏–∑–º–∞? –†–∞–±–æ—Ç—è—Ç –ª–∏ –¥—Ä—É–≥–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤ —Å—Ç–∞—è—Ç–∞?',
            type: 'open',
            required: true
          },
          {
            id: 'electrical_outlet_recent_changes',
            text: '–ò–º–∞ –ª–∏ —Å–∫–æ—Ä–æ—à–Ω–∏ –ø—Ä–æ–º–µ–Ω–∏ –≤ –µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—Ç–∞ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è –∏–ª–∏ –Ω–æ–≤–∏ —É—Ä–µ–¥–∏?',
            type: 'open',
            required: false
          }
        ],
        electrical_panel: [
          {
            id: 'electrical_panel_symptoms',
            text: '–ò–∑—Å–∫–æ—á–∏–ª–∏ –ª–∏ —Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—Ç–µ? –ò–º–∞ –ª–∏ –∏—Å–∫—Ä–∏ –∏–ª–∏ –Ω–µ–æ–±–∏—á–∞–π–Ω–∏ –∑–≤—É—Ü–∏ –æ—Ç —Ç–∞–±–ª–æ—Ç–æ?',
            type: 'open',
            required: true
          },
          {
            id: 'electrical_panel_affected_areas',
            text: '–ö–æ–∏ —á–∞—Å—Ç–∏ –æ—Ç –¥–æ–º–∞ —Å–∞ –±–µ–∑ —Ç–æ–∫?',
            type: 'open',
            required: true
          }
        ],
        plumbing_leak: [
          {
            id: 'plumbing_leak_location',
            text: '–¢–æ—á–Ω–æ –∫—ä–¥–µ —Ç–µ—á–µ? –ü–æ–¥ –º–∏–≤–∫–∞—Ç–∞, –æ—Ç —Ç—Ä—ä–±–∏—Ç–µ, –∏–ª–∏ –æ—Ç –¥—Ä—É–≥–æ –º—è—Å—Ç–æ?',
            type: 'open',
            required: true
          },
          {
            id: 'plumbing_leak_amount',
            text: '–ú–Ω–æ–≥–æ –ª–∏ —Ç–µ—á–µ? –ö–∞–ø–µ –±–∞–≤–Ω–æ –∏–ª–∏ –∏–º–∞ —Å–∏–ª–Ω–∞ —Å—Ç—Ä—É—è?',
            type: 'open',
            required: true
          }
        ],
        plumbing_blockage: [
          {
            id: 'plumbing_blockage_location',
            text: '–ö—ä–¥–µ –µ –∑–∞–ø—É—à–≤–∞–Ω–µ—Ç–æ? –í –º–∏–≤–∫–∞—Ç–∞, —Ç–æ–∞–ª–µ—Ç–Ω–∞—Ç–∞, –∏–ª–∏ –≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞?',
            type: 'open',
            required: true
          },
          {
            id: 'plumbing_blockage_attempts',
            text: '–û–ø–∏—Ç–≤–∞–ª–∏ –ª–∏ —Å—Ç–µ –¥–∞ –≥–æ –æ—Ç–ø—É—à–∏—Ç–µ? –ö–∞–∫–≤–æ —Å—Ç–µ –∏–∑–ø–æ–ª–∑–≤–∞–ª–∏?',
            type: 'open',
            required: false
          }
        ],
        hvac_heating: [
          {
            id: 'hvac_heating_symptoms',
            text: '–†–∞–±–æ—Ç–∏ –ª–∏ –∫–æ—Ç–µ–ª—ä—Ç? –¢–æ–ø–ª–∏ –ª–∏ —Å–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∏—Ç–µ? –ò–º–∞ –ª–∏ —Ç–æ–ø–ª–∞ –≤–æ–¥–∞?',
            type: 'open',
            required: true
          },
          {
            id: 'hvac_heating_recent_service',
            text: '–ö–æ–≥–∞ –µ –±–∏–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –Ω–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ—Ç–æ?',
            type: 'open',
            required: false
          }
        ],
        electrical_wiring: [
          {
            id: 'electrical_wiring_symptoms',
            text: '–ò–º–∞ –ª–∏ –∏—Å–∫—Ä–∏, –¥–∏–º –∏–ª–∏ –º–∏—Ä–∏–∑–º–∞? –ú–∏–≥–∞—Ç –ª–∏ –ª–∞–º–ø–∏—Ç–µ?',
            type: 'open',
            required: true
          }
        ],
        electrical_lighting: [
          {
            id: 'electrical_lighting_symptoms',
            text: '–ù–µ —Å–≤–µ—Ç—è—Ç –ª–∏ –ª–∞–º–ø–∏—Ç–µ? –ú–∏–≥–∞—Ç –ª–∏? –ò–∑–≥–æ—Ä—è –ª–∏ –∫—Ä—É—à–∫–∞—Ç–∞?',
            type: 'open',
            required: true
          }
        ],
        electrical_appliance: [
          {
            id: 'electrical_appliance_symptoms',
            text: '–ö–æ–π —É—Ä–µ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∏? –ö–∞–∫–≤–æ —Ç–æ—á–Ω–æ –ø—Ä–∞–≤–∏ –∏–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏?',
            type: 'open',
            required: true
          }
        ],
        plumbing_pressure: [
          {
            id: 'plumbing_pressure_symptoms',
            text: '–°–ª–∞–±–æ –ª–∏ –µ –Ω–∞–ª—è–≥–∞–Ω–µ—Ç–æ? –í—ä–≤ –≤—Å–∏—á–∫–∏ –∫—Ä–∞–Ω–æ–≤–µ –ª–∏, –∏–ª–∏ —Å–∞–º–æ –≤ –Ω—è–∫–æ–∏?',
            type: 'open',
            required: true
          }
        ],
        plumbing_heating: [
          {
            id: 'plumbing_heating_symptoms',
            text: '–ù—è–º–∞ –ª–∏ —Ç–æ–ø–ª–∞ –≤–æ–¥–∞? –°–∞–º–æ –≤ –±–∞–Ω—è—Ç–∞ –ª–∏, –∏–ª–∏ –Ω–∞–≤—Å—è–∫—ä–¥–µ?',
            type: 'open',
            required: true
          }
        ],
        hvac_cooling: [
          {
            id: 'hvac_cooling_symptoms',
            text: '–ù–µ –æ—Ö–ª–∞–∂–¥–∞ –ª–∏ –∫–ª–∏–º–∞—Ç–∏–∫—ä—Ç? –†–∞–±–æ—Ç–∏ –ª–∏ –≤–µ–Ω—Ç–∏–ª–∞—Ç–æ—Ä—ä—Ç?',
            type: 'open',
            required: true
          }
        ],
        hvac_ventilation: [
          {
            id: 'hvac_ventilation_symptoms',
            text: '–ù–µ –¥—É—Ö–∞ –ª–∏ –≤–µ–Ω—Ç–∏–ª–∞—Ü–∏—è—Ç–∞? –ò–º–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–Ω–∏ –∑–≤—É—Ü–∏?',
            type: 'open',
            required: true
          }
        ],
        general_maintenance: [
          {
            id: 'general_maintenance_description',
            text: '–ö–∞–∫–≤–æ —Ç–æ—á–Ω–æ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –Ω–∞–ø—Ä–∞–≤–∏? –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç?',
            type: 'open',
            required: true
          }
        ],
        unknown: [
          {
            id: 'unknown_clarification',
            text: '–ú–æ–∂–µ—Ç–µ –ª–∏ –¥–∞ –æ–ø–∏—à–µ—Ç–µ –ø–æ-–ø–æ–¥—Ä–æ–±–Ω–æ –∫–∞–∫–≤–æ —Å–µ —Å–ª—É—á–≤–∞?',
            type: 'open',
            required: true
          }
        ]
      },
      emergencyFlow: [
        {
          id: 'emergency_safety',
          text: 'üö® –°–ü–ï–®–ù–û: –ó–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—Ç–∞ –≤–∏, –º–æ–ª—è —Å–ø—Ä–µ—Ç–µ –≥–ª–∞–≤–Ω–∏—è –ø—Ä–µ–∫—ä—Å–≤–∞—á/—Å–ø–∏—Ä–∞—Ç–µ–ª–µ–Ω –∫—Ä–∞–Ω! –ò–¥–≤–∞–º –≤–µ–¥–Ω–∞–≥–∞!',
          type: 'closed',
          required: false
        },
        {
          id: 'emergency_eta',
          text: '–©–µ –±—ä–¥–∞ –ø—Ä–∏ –≤–∞—Å –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ 15-30 –º–∏–Ω—É—Ç–∏. –ò–º–∞—Ç–µ –ª–∏ –Ω—É–∂–¥–∞ –æ—Ç —Å–ø–µ—à–Ω–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?',
          type: 'closed',
          required: false
        }
      ],
      completionCriteria: {
        requiredFields: ['location', 'symptoms'],
        minimumSymptoms: 2,
        riskAssessmentRequired: true,
        customerConfirmationRequired: false
      }
    };
  }

  /**
   * Start a new AI conversation
   */
  async startConversation(
    phoneNumber: string,
    platform: 'whatsapp' | 'viber' | 'telegram',
    contactId?: string
  ): Promise<AIConversation> {
    const conversationId = `ai_${platform}_${phoneNumber}_${Date.now()}`;
    
    const conversation: AIConversation = {
      id: conversationId,
      contactId,
      phoneNumber,
      platform,
      status: 'active',
      currentState: 'INITIAL_RESPONSE',
      messages: [],
      analysis: {
        problemType: 'unknown',
        urgencyLevel: 'medium',
        issueDescription: '',
        extractedInfo: {
          symptoms: [],
          safetyIssues: [],
          additionalNotes: []
        },
        riskAssessment: {
          level: 'low',
          factors: [],
          immediateActions: [],
          safetyPrecautions: []
        },
        recommendations: [],
        nextSteps: [],
        readyForCallback: false,
        confidence: 0.0
      },
      startedAt: Date.now(),
      lastMessageAt: Date.now(),
      metadata: {
        customerLanguage: 'bg',
        aiModel: 'rule-based-v1',
        processingTime: 0,
        apiCalls: 0,
        errorCount: 0
      }
    };

    this.conversations.set(conversationId, conversation);
    await this.saveConversations();

    console.log(`[ConversationFlow] Started conversation ${conversationId} for ${phoneNumber}`);
    return conversation;
  }

  /**
   * Process incoming customer message
   */
  async processCustomerMessage(
    conversationId: string,
    messageContent: string,
    messageType: 'text' | 'image' | 'location' = 'text'
  ): Promise<{
    conversation: AIConversation;
    nextQuestion?: string;
    shouldEscalate: boolean;
    isComplete: boolean;
  }> {
    const conversation = this.conversations.get(conversationId);
    if (!conversation) {
      throw new Error(`Conversation ${conversationId} not found`);
    }

    try {
      // Create customer message
      const customerMessage: AIMessage = {
        id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        conversationId,
        sender: 'customer',
        content: messageContent,
        timestamp: Date.now(),
        messageType,
        language: 'bg'
      };

      // Process with NLP
      const nlpResults = await this.nlpProcessor.processMessage(customerMessage);
      
      customerMessage.intent = nlpResults.intent;
      customerMessage.entities = nlpResults.entities;
      customerMessage.sentiment = nlpResults.sentiment;
      customerMessage.confidence = nlpResults.confidence;

      // Add message to conversation
      conversation.messages.push(customerMessage);
      conversation.lastMessageAt = Date.now();

      // Update conversation analysis
      await this.updateConversationAnalysis(conversation, customerMessage);

      // Determine next state and action
      const nextAction = await this.determineNextAction(conversation);

      // Update conversation state
      conversation.currentState = nextAction.nextState;
      conversation.status = nextAction.status;

      // Save updated conversation
      this.conversations.set(conversationId, conversation);
      await this.saveConversations();

      console.log(`[ConversationFlow] Processed message in conversation ${conversationId}, state: ${conversation.currentState}`);

      return {
        conversation,
        nextQuestion: nextAction.nextQuestion,
        shouldEscalate: nextAction.shouldEscalate,
        isComplete: nextAction.isComplete
      };

    } catch (error) {
      console.error(`[ConversationFlow] Error processing message in conversation ${conversationId}:`, error);
      conversation.metadata.errorCount++;
      
      return {
        conversation,
        shouldEscalate: true,
        isComplete: false
      };
    }
  }

  /**
   * Update conversation analysis based on new message
   */
  private async updateConversationAnalysis(
    conversation: AIConversation,
    message: AIMessage
  ): Promise<void> {
    const entities = message.entities || [];
    
    // Update problem type
    const problemTypeEntity = entities.find(e => e.type === 'problem_type');
    if (problemTypeEntity && problemTypeEntity.confidence > 0.7) {
      conversation.analysis.problemType = problemTypeEntity.value as ProblemType;
    }

    // Update urgency level
    const urgencyEntity = entities.find(e => e.type === 'urgency_level');
    if (urgencyEntity && urgencyEntity.confidence > 0.7) {
      conversation.analysis.urgencyLevel = urgencyEntity.value as UrgencyLevel;
    }

    // Update extracted information
    const locationEntity = entities.find(e => e.type === 'location');
    if (locationEntity) {
      conversation.analysis.extractedInfo.location = locationEntity.value;
    }

    // Add symptoms
    const symptomEntities = entities.filter(e => e.type === 'symptom');
    for (const symptom of symptomEntities) {
      if (!conversation.analysis.extractedInfo.symptoms.includes(symptom.value)) {
        conversation.analysis.extractedInfo.symptoms.push(symptom.value);
      }
    }

    // Add safety issues
    const safetyEntities = entities.filter(e => e.type === 'safety_concern');
    for (const safety of safetyEntities) {
      if (!conversation.analysis.extractedInfo.safetyIssues.includes(safety.value)) {
        conversation.analysis.extractedInfo.safetyIssues.push(safety.value);
      }
    }

    // Update issue description
    if (message.intent?.category === 'problem_description') {
      if (conversation.analysis.issueDescription) {
        conversation.analysis.issueDescription += ' ' + message.content;
      } else {
        conversation.analysis.issueDescription = message.content;
      }
    }

    // Update risk assessment
    await this.updateRiskAssessment(conversation);

    // Update completion readiness
    conversation.analysis.readyForCallback = await this.checkCompletionReadiness(conversation);
  }

  /**
   * Update risk assessment based on current analysis
   */
  private async updateRiskAssessment(conversation: AIConversation): Promise<void> {
    const analysis = conversation.analysis;
    const safetyIssues = analysis.extractedInfo.safetyIssues;
    const urgencyLevel = analysis.urgencyLevel;

    // Determine risk level
    if (safetyIssues.some(issue => ['–∏—Å–∫—Ä–∏', '–ø–∞—Ä–µ–Ω–µ', '—Ç–æ–∫–æ–≤ —É–¥–∞—Ä', '–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ'].includes(issue))) {
      analysis.riskAssessment.level = 'critical';
      analysis.riskAssessment.immediateActions = [
        '–°–ø—Ä–µ—Ç–µ –≥–ª–∞–≤–Ω–∏—è –ø—Ä–µ–∫—ä—Å–≤–∞—á/—Å–ø–∏—Ä–∞—Ç–µ–ª–µ–Ω –∫—Ä–∞–Ω',
        '–ù–µ –¥–æ–∫–æ—Å–≤–∞–π—Ç–µ –Ω–∏—â–æ –º–æ–∫—Ä–æ –∏–ª–∏ –ø–æ–≤—Ä–µ–¥–µ–Ω–æ',
        '–ò–∑–ª–µ–∑—Ç–µ –æ—Ç –æ–ø–∞—Å–Ω–∞—Ç–∞ –∑–æ–Ω–∞'
      ];
    } else if (urgencyLevel === 'emergency' || urgencyLevel === 'critical') {
      analysis.riskAssessment.level = 'high';
      analysis.riskAssessment.immediateActions = [
        '–°–ø—Ä–µ—Ç–µ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –ø–æ–≤—Ä–µ–¥–µ–Ω–∏—è —É—Ä–µ–¥/—Å–∏—Å—Ç–µ–º–∞',
        '–ü—Ä–æ–≤–µ—Ç—Ä–µ—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ—Ç–æ –∞–∫–æ –∏–º–∞ –º–∏—Ä–∏–∑–º–∞'
      ];
    } else if (safetyIssues.length > 0) {
      analysis.riskAssessment.level = 'medium';
    } else {
      analysis.riskAssessment.level = 'low';
    }

    // Add general safety precautions
    analysis.riskAssessment.safetyPrecautions = [
      '–ù–µ –ø—Ä–∞–≤–µ—Ç–µ –æ–ø–∏—Ç–∏ –∑–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª–µ–Ω —Ä–µ–º–æ–Ω—Ç',
      '–°–ø—Ä–µ—Ç–µ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –ø–æ–≤—Ä–µ–¥–µ–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞',
      '–£–≤–µ–¥–æ–º–µ—Ç–µ –≤—Å–∏—á–∫–∏ –≤ –¥–æ–º–∞ –∑–∞ –ø—Ä–æ–±–ª–µ–º–∞'
    ];
  }

  /**
   * Determine next action based on conversation state
   */
  private async determineNextAction(conversation: AIConversation): Promise<{
    nextState: ConversationState;
    status: ConversationStatus;
    nextQuestion?: string;
    shouldEscalate: boolean;
    isComplete: boolean;
  }> {
    const currentState = conversation.currentState;
    const analysis = conversation.analysis;
    const lastMessage = conversation.messages[conversation.messages.length - 1];

    // Handle emergency situations
    if (analysis.urgencyLevel === 'emergency' || analysis.riskAssessment.level === 'critical') {
      return {
        nextState: 'COMPLETED',
        status: 'escalated',
        nextQuestion: this.conversationFlows.emergencyFlow[0].text,
        shouldEscalate: true,
        isComplete: true
      };
    }

    // State transitions
    switch (currentState) {
      case 'INITIAL_RESPONSE':
        return {
          nextState: 'AWAITING_DESCRIPTION',
          status: 'waiting_response',
          nextQuestion: this.conversationFlows.initialQuestions[0].text,
          shouldEscalate: false,
          isComplete: false
        };

      case 'AWAITING_DESCRIPTION':
        if (lastMessage.intent?.category === 'problem_description') {
          return {
            nextState: 'FOLLOW_UP_QUESTIONS',
            status: 'active',
            nextQuestion: this.getNextFollowUpQuestion(conversation),
            shouldEscalate: false,
            isComplete: false
          };
        }
        break;

      case 'FOLLOW_UP_QUESTIONS':
        if (analysis.readyForCallback) {
          return {
            nextState: 'COMPLETED',
            status: 'completed',
            nextQuestion: this.generateCompletionMessage(conversation),
            shouldEscalate: false,
            isComplete: true
          };
        } else {
          return {
            nextState: 'GATHERING_DETAILS',
            status: 'active',
            nextQuestion: this.getNextFollowUpQuestion(conversation),
            shouldEscalate: false,
            isComplete: false
          };
        }

      case 'GATHERING_DETAILS':
        if (analysis.readyForCallback) {
          return {
            nextState: 'COMPLETED',
            status: 'completed',
            nextQuestion: this.generateCompletionMessage(conversation),
            shouldEscalate: false,
            isComplete: true
          };
        }
        break;

      default:
        break;
    }

    // Default action
    return {
      nextState: 'GATHERING_DETAILS',
      status: 'active',
      nextQuestion: '–ú–æ–∂–µ—Ç–µ –ª–∏ –¥–∞ –º–∏ –¥–∞–¥–µ—Ç–µ –æ—â–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞ –ø—Ä–æ–±–ª–µ–º–∞?',
      shouldEscalate: false,
      isComplete: false
    };
  }

  /**
   * Get next follow-up question based on problem type
   */
  private getNextFollowUpQuestion(conversation: AIConversation): string {
    const problemType = conversation.analysis.problemType;
    const followUpQuestions = this.conversationFlows.followUpQuestions[problemType];
    
    if (followUpQuestions && followUpQuestions.length > 0) {
      // Find first unanswered question
      const answeredTopics = conversation.messages
        .filter(m => m.sender === 'customer')
        .map(m => m.content.toLowerCase());

      for (const question of followUpQuestions) {
        // Simple check if topic has been addressed
        const questionKeywords = question.text.toLowerCase().split(' ');
        const hasBeenAnswered = questionKeywords.some(keyword => 
          answeredTopics.some(answer => answer.includes(keyword))
        );

        if (!hasBeenAnswered) {
          return question.text;
        }
      }
    }

    // Fallback questions
    const fallbackQuestions = [
      '–ò–º–∞ –ª–∏ –æ—â–µ —Å–∏–º–ø—Ç–æ–º–∏ –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –∫–æ–∏—Ç–æ –¥–∞ —Å–ø–æ–¥–µ–ª–∏—Ç–µ?',
      '–ö–æ–≥–∞ –≤–∏ –µ –Ω–∞–π-—É–¥–æ–±–Ω–æ –¥–∞ –¥–æ–π–¥–∞ –∑–∞ –æ–≥–ª–µ–¥?',
      '–ò–º–∞—Ç–µ –ª–∏ –¥—Ä—É–≥–∏ –≤—ä–ø—Ä–æ—Å–∏ –æ—Ç–Ω–æ—Å–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞?'
    ];

    const randomIndex = Math.floor(Math.random() * fallbackQuestions.length);
    return fallbackQuestions[randomIndex];
  }

  /**
   * Generate completion message
   */
  private generateCompletionMessage(conversation: AIConversation): string {
    const analysis = conversation.analysis;
    const problemType = this.getProblemTypeInBulgarian(analysis.problemType);
    const location = analysis.extractedInfo.location || '–¥–æ–º–∞ –≤–∏';
    
    let message = `–ë–ª–∞–≥–æ–¥–∞—Ä—è –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞! –†–∞–∑–±—Ä–∞—Ö, —á–µ –∏–º–∞—Ç–µ –ø—Ä–æ–±–ª–µ–º —Å ${problemType} –≤ ${location}. `;
    
    if (analysis.extractedInfo.symptoms.length > 0) {
      message += `–°–∏–º–ø—Ç–æ–º–∏—Ç–µ —Å–∞: ${analysis.extractedInfo.symptoms.join(', ')}. `;
    }

    if (analysis.urgencyLevel === 'high') {
      message += '–©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ 30 –º–∏–Ω—É—Ç–∏ –∑–∞ –¥–∞ —É–≥–æ–≤–æ—Ä–∏–º —á–∞—Å. ';
    } else if (analysis.urgencyLevel === 'medium') {
      message += '–©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å –¥–æ –∫—Ä–∞—è –Ω–∞ –¥–µ–Ω—è –∑–∞ –¥–∞ —É–≥–æ–≤–æ—Ä–∏–º —á–∞—Å. ';
    } else {
      message += '–©–µ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ –¥–∞ —É–≥–æ–≤–æ—Ä–∏–º —á–∞—Å. ';
    }

    if (analysis.riskAssessment.level === 'high' || analysis.riskAssessment.level === 'critical') {
      message += '‚ö†Ô∏è –ó–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç, –º–æ–ª—è –Ω–µ –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –ø–æ–≤—Ä–µ–¥–µ–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–æ –º–æ–µ—Ç–æ –∏–¥–≤–∞–Ω–µ.';
    }

    return message;
  }

  /**
   * Get problem type in Bulgarian
   */
  private getProblemTypeInBulgarian(problemType: ProblemType): string {
    const translations: Record<ProblemType, string> = {
      electrical_outlet: '–µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç',
      electrical_panel: '–µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ —Ç–∞–±–ª–æ',
      electrical_wiring: '–µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ –æ–∫–∞–±–µ–ª—è–≤–∞–Ω–µ',
      electrical_lighting: '–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ',
      electrical_appliance: '–µ–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏ —É—Ä–µ–¥',
      plumbing_leak: '—Ç–µ—á–µ–Ω–∏–µ –≤—ä–≤ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–∞',
      plumbing_blockage: '–∑–∞–ø—É—à–≤–∞–Ω–µ –≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞',
      plumbing_pressure: '–Ω–∞–ª—è–≥–∞–Ω–µ –≤—ä–≤ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–∞',
      plumbing_heating: '—Ç–æ–ø–ª–∞ –≤–æ–¥–∞',
      hvac_heating: '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ',
      hvac_cooling: '–∫–ª–∏–º–∞—Ç–∏–∑–∞—Ü–∏—è',
      hvac_ventilation: '–≤–µ–Ω—Ç–∏–ª–∞—Ü–∏—è',
      general_maintenance: '–ø–æ–¥–¥—Ä—ä–∂–∫–∞',
      unknown: '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—è –ø—Ä–æ–±–ª–µ–º'
    };

    return translations[problemType] || '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—è –ø—Ä–æ–±–ª–µ–º';
  }

  /**
   * Check if conversation is ready for completion
   */
  private async checkCompletionReadiness(conversation: AIConversation): Promise<boolean> {
    const analysis = conversation.analysis;
    const criteria = this.conversationFlows.completionCriteria;

    // Check required fields
    const hasLocation = !!analysis.extractedInfo.location;
    const hasEnoughSymptoms = analysis.extractedInfo.symptoms.length >= criteria.minimumSymptoms;
    const hasProblemType = analysis.problemType !== 'unknown';

    // Check conversation depth
    const customerMessages = conversation.messages.filter(m => m.sender === 'customer').length;
    const hasEnoughExchange = customerMessages >= 3;

    return hasLocation && hasEnoughSymptoms && hasProblemType && hasEnoughExchange;
  }

  /**
   * Get conversation by ID
   */
  getConversation(conversationId: string): AIConversation | undefined {
    return this.conversations.get(conversationId);
  }

  /**
   * Get active conversations
   */
  getActiveConversations(): AIConversation[] {
    return Array.from(this.conversations.values()).filter(
      conv => conv.status === 'active' || conv.status === 'waiting_response'
    );
  }

  /**
   * Close conversation
   */
  async closeConversation(conversationId: string, reason: string = 'completed'): Promise<void> {
    const conversation = this.conversations.get(conversationId);
    if (conversation) {
      conversation.status = 'closed';
      conversation.completedAt = Date.now();
      
      await this.saveConversations();
      console.log(`[ConversationFlow] Closed conversation ${conversationId}: ${reason}`);
    }
  }

  /**
   * Save conversations to storage
   */
  private async saveConversations(): Promise<void> {
    try {
      const conversationsArray = Array.from(this.conversations.values());
      await AsyncStorage.setItem(this.CONVERSATIONS_KEY, JSON.stringify(conversationsArray));
    } catch (error) {
      console.error('[ConversationFlow] Error saving conversations:', error);
    }
  }

  /**
   * Load conversations from storage
   */
  async loadConversations(): Promise<void> {
    try {
      const stored = await AsyncStorage.getItem(this.CONVERSATIONS_KEY);
      if (stored) {
        const conversationsArray: AIConversation[] = JSON.parse(stored);
        this.conversations.clear();
        conversationsArray.forEach(conv => {
          this.conversations.set(conv.id, conv);
        });
        console.log(`[ConversationFlow] Loaded ${conversationsArray.length} conversations`);
      }
    } catch (error) {
      console.error('[ConversationFlow] Error loading conversations:', error);
    }
  }

  /**
   * Get conversation statistics
   */
  getConversationStats(): {
    total: number;
    active: number;
    completed: number;
    escalated: number;
    averageMessages: number;
  } {
    const conversations = Array.from(this.conversations.values());
    
    return {
      total: conversations.length,
      active: conversations.filter(c => c.status === 'active').length,
      completed: conversations.filter(c => c.status === 'completed').length,
      escalated: conversations.filter(c => c.status === 'escalated').length,
      averageMessages: conversations.length > 0 
        ? conversations.reduce((sum, c) => sum + c.messages.length, 0) / conversations.length 
        : 0
    };
  }
}
